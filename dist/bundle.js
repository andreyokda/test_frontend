/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("document.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.querySelectorAll(\".advantages__block__items\").forEach(block => {\r\n        const openLink = block.querySelector(\".advantages__block__items__content__open a\");\r\n        const secondBlock = block.nextElementSibling; // Предполагаем, что второй блок идет сразу за первым\r\n\r\n        openLink.addEventListener(\"click\", function (event) {\r\n            event.preventDefault();\r\n            block.style.display = \"none\";\r\n            secondBlock.style.display = \"block\";\r\n        });\r\n\r\n        const closeLink = secondBlock.querySelector(\".advantages__block__items__content__close a\");\r\n        closeLink.addEventListener(\"click\", function (event) {\r\n            event.preventDefault();\r\n            secondBlock.style.display = \"none\";\r\n            block.style.display = \"block\";\r\n        });\r\n    });\r\n});\r\n\r\n\r\n/*\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    const carouselInner = document.querySelector('.carousel-inner');\r\n    const items = document.querySelectorAll('.carousel-item');\r\n    const prevButton = document.querySelector('.carousel-prev');\r\n    const nextButton = document.querySelector('.carousel-next');\r\n    const pagination = document.querySelector('.carousel-pagination');\r\n\r\n    let currentIndex = 0; // Текущий индекс пары блоков\r\n    const itemsPerPage = 2; // Количество отображаемых элементов\r\n    const itemWidth = 260; // Ширина одного элемента\r\n    const gap = 20; // Отступ между элементами\r\n\r\n\r\n    // Создаем пагинацию\r\n    const totalPages = Math.ceil(items.length / itemsPerPage); // Количество точек\r\n    for (let i = 0; i < totalPages; i++) {\r\n        const dot = document.createElement('span');\r\n        dot.addEventListener('click', () => goToPage(i));\r\n        pagination.appendChild(dot);\r\n    }\r\n\r\n    // Обновляем пагинацию\r\n    function updatePagination() {\r\n        const dots = document.querySelectorAll('.carousel-pagination span');\r\n        dots.forEach((dot, index) => {\r\n            dot.classList.toggle('active', index === currentIndex);\r\n        });\r\n    }\r\n\r\n    // Переход к указанной странице\r\n    function goToPage(pageIndex) {\r\n        if (pageIndex < 0 || pageIndex >= totalPages) return;\r\n        currentIndex = pageIndex;\r\n        updateCarousel();\r\n        updatePagination();\r\n    }\r\n\r\n    // Обновляем позицию карусели\r\n    function updateCarousel() {\r\n        const offset = -currentIndex * (itemsPerPage * (itemWidth + gap));\r\n        carouselInner.style.transform = `translateX(${offset}px)`;\r\n    }\r\n\r\n    // Переход к следующей паре блоков\r\n    nextButton.addEventListener('click', () => {\r\n        if (currentIndex < totalPages - 1) {\r\n            currentIndex++;\r\n        } else {\r\n            currentIndex = 0; // Возвращаемся к началу\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    // Переход к предыдущей паре блоков\r\n    prevButton.addEventListener('click', () => {\r\n        if (currentIndex > 0) {\r\n            currentIndex--;\r\n        } else {\r\n            currentIndex = totalPages - 1; // Переходим к концу\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    let startX = 0;\r\n    let endX = 0;\r\n\r\n    carouselInner.addEventListener('touchstart', (event) => {\r\n        startX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchmove', (event) => {\r\n        endX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchend', () => {\r\n        const deltaX = startX - endX;\r\n        if (deltaX > 50) {\r\n            if (currentIndex < totalPages - 1) {\r\n                currentIndex++;\r\n            } else {\r\n                currentIndex = 0;\r\n            }\r\n        } else if (deltaX < -50) {\r\n            if (currentIndex > 0) {\r\n                currentIndex--;\r\n            } else {\r\n                currentIndex = totalPages - 1;\r\n            }\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    // Инициализация\r\n    updatePagination();\r\n});\r\n\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    const carouselInner = document.querySelector('.carousel-inner-mobile');\r\n    const items = document.querySelectorAll('.carousel-item-mobile');\r\n    const prevButton = document.querySelector('.carousel-prev-mobile');\r\n    const nextButton = document.querySelector('.carousel-next-mobile');\r\n    const pagination = document.querySelector('.carousel-pagination-mobile');\r\n\r\n    let currentIndex = 0; // Текущий индекс пары блоков\r\n    const itemsPerPage = 1; // Количество отображаемых элементов\r\n    const itemWidth = 260; // Ширина одного элемента\r\n    const gap = 20; // Отступ между элементами\r\n\r\n\r\n    pagination.innerHTML = '';\r\n    // Создаем пагинацию\r\n    const totalPages = Math.ceil(items.length / itemsPerPage); // Количество точек\r\n    for (let i = 0; i < totalPages; i++) {\r\n        const dot = document.createElement('span');\r\n        dot.addEventListener('click', () => goToPage(i));\r\n        pagination.appendChild(dot);\r\n    }\r\n\r\n    // Обновляем пагинацию\r\n    function updatePagination() {\r\n        const dots = document.querySelectorAll('.carousel-pagination-mobile span');\r\n        dots.forEach((dot, index) => {\r\n            dot.classList.toggle('active', index === currentIndex);\r\n        });\r\n    }\r\n\r\n    // Переход к указанной странице\r\n    function goToPage(pageIndex) {\r\n        if (pageIndex < 0 || pageIndex >= totalPages) return;\r\n        currentIndex = pageIndex;\r\n        updateCarousel();\r\n        updatePagination();\r\n    }\r\n\r\n    // Обновляем позицию карусели\r\n    function updateCarousel() {\r\n        const offset = -currentIndex * (itemsPerPage * (itemWidth + gap));\r\n        carouselInner.style.transform = `translateX(${offset}px)`;\r\n    }\r\n\r\n    // Переход к следующей паре блоков\r\n    nextButton.addEventListener('click', () => {\r\n        if (currentIndex < totalPages - 1) {\r\n            currentIndex++;\r\n        } else {\r\n            currentIndex = 0; // Возвращаемся к началу\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    // Переход к предыдущей паре блоков\r\n    prevButton.addEventListener('click', () => {\r\n        if (currentIndex > 0) {\r\n            currentIndex--;\r\n        } else {\r\n            currentIndex = totalPages - 1; // Переходим к концу\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    let startX = 0;\r\n    let endX = 0;\r\n\r\n    carouselInner.addEventListener('touchstart', (event) => {\r\n        startX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchmove', (event) => {\r\n        endX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchend', () => {\r\n        const deltaX = startX - endX;\r\n        if (deltaX > 50) {\r\n            if (currentIndex < totalPages - 1) {\r\n                currentIndex++;\r\n            } else {\r\n                currentIndex = 0;\r\n            }\r\n        } else if (deltaX < -50) {\r\n            if (currentIndex > 0) {\r\n                currentIndex--;\r\n            } else {\r\n                currentIndex = totalPages - 1;\r\n            }\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    // Инициализация\r\n    updatePagination();\r\n});\r\n\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    const carouselInner = document.querySelector('.carousel-inner-info');\r\n    const items = document.querySelectorAll('.carousel-item-info');\r\n    const prevButton = document.querySelector('.carousel-prev-info');\r\n    const nextButton = document.querySelector('.carousel-next-info');\r\n    const pagination = document.querySelector('.carousel-pagination-info');\r\n\r\n    let currentIndex = 0;\r\n    const itemsPerPage = 2;\r\n    const itemWidth = 260;\r\n    const gap = 20;\r\n\r\n    const totalPages = Math.ceil(items.length / itemsPerPage);\r\n    for (let i = 0; i < totalPages; i++) {\r\n        const dot = document.createElement('span');\r\n        dot.addEventListener('click', () => goToPage(i));\r\n        pagination.appendChild(dot);\r\n    }\r\n\r\n    function updatePagination() {\r\n        const dots = document.querySelectorAll('.carousel-pagination-info span');\r\n        dots.forEach((dot, index) => {\r\n            dot.classList.toggle('active', index === currentIndex);\r\n        });\r\n    }\r\n\r\n    function goToPage(pageIndex) {\r\n        if (pageIndex < 0 || pageIndex >= totalPages) return;\r\n        currentIndex = pageIndex;\r\n        updateCarousel();\r\n        updatePagination();\r\n    }\r\n\r\n    function updateCarousel() {\r\n        const offset = -currentIndex * (itemsPerPage * (itemWidth + gap));\r\n        carouselInner.style.transform = `translateX(${offset}px)`;\r\n    }\r\n\r\n    nextButton.addEventListener('click', () => {\r\n        if (currentIndex < totalPages - 1) {\r\n            currentIndex++;\r\n        } else {\r\n            currentIndex = 0;\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    prevButton.addEventListener('click', () => {\r\n        if (currentIndex > 0) {\r\n            currentIndex--;\r\n        } else {\r\n            currentIndex = totalPages - 1;\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    let startX = 0;\r\n    let endX = 0;\r\n\r\n    carouselInner.addEventListener('touchstart', (event) => {\r\n        startX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchmove', (event) => {\r\n        endX = event.touches[0].clientX;\r\n    });\r\n\r\n    carouselInner.addEventListener('touchend', () => {\r\n        const deltaX = startX - endX;\r\n        if (deltaX > 50) {\r\n            if (currentIndex < totalPages - 1) {\r\n                currentIndex++;\r\n            } else {\r\n                currentIndex = 0;\r\n            }\r\n        } else if (deltaX < -50) {\r\n            if (currentIndex > 0) {\r\n                currentIndex--;\r\n            } else {\r\n                currentIndex = totalPages - 1;\r\n            }\r\n        }\r\n        updateCarousel();\r\n        updatePagination();\r\n    });\r\n\r\n    updatePagination();\r\n});\r\n\r\n*/\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Универсальная функция для инициализации карусели\r\n    function initCarousel(config) {\r\n        const {\r\n            carouselInnerSelector,\r\n            itemSelector,\r\n            prevButtonSelector,\r\n            nextButtonSelector,\r\n            paginationSelector,\r\n            itemsPerPage,\r\n            itemWidth,\r\n            gap,\r\n        } = config;\r\n\r\n        const carouselInner = document.querySelector(carouselInnerSelector);\r\n        const items = document.querySelectorAll(itemSelector);\r\n        const prevButton = document.querySelector(prevButtonSelector);\r\n        const nextButton = document.querySelector(nextButtonSelector);\r\n        const pagination = document.querySelector(paginationSelector);\r\n\r\n        let currentIndex = 0;\r\n        const totalPages = Math.ceil(items.length / itemsPerPage);\r\n\r\n        // Очищаем пагинацию\r\n        pagination.innerHTML = '';\r\n\r\n        // Создаем пагинацию\r\n        for (let i = 0; i < totalPages; i++) {\r\n            const dot = document.createElement('span');\r\n            dot.addEventListener('click', () => goToPage(i));\r\n            pagination.appendChild(dot);\r\n        }\r\n\r\n        // Обновляем пагинацию\r\n        function updatePagination() {\r\n            const dots = document.querySelectorAll(`${paginationSelector} span`);\r\n            dots.forEach((dot, index) => {\r\n                dot.classList.toggle('active', index === currentIndex);\r\n            });\r\n        }\r\n\r\n        // Переход к указанной странице\r\n        function goToPage(pageIndex) {\r\n            if (pageIndex < 0 || pageIndex >= totalPages) return;\r\n            currentIndex = pageIndex;\r\n            updateCarousel();\r\n            updatePagination();\r\n        }\r\n\r\n        // Обновляем позицию карусели\r\n        function updateCarousel() {\r\n            const offset = -currentIndex * (itemsPerPage * (itemWidth + gap));\r\n            carouselInner.style.transform = `translateX(${offset}px)`;\r\n        }\r\n\r\n        // Переход к следующей странице\r\n        nextButton.addEventListener('click', () => {\r\n            if (currentIndex < totalPages - 1) {\r\n                currentIndex++;\r\n            } else {\r\n                currentIndex = 0;\r\n            }\r\n            updateCarousel();\r\n            updatePagination();\r\n        });\r\n\r\n        // Переход к предыдущей странице\r\n        prevButton.addEventListener('click', () => {\r\n            if (currentIndex > 0) {\r\n                currentIndex--;\r\n            } else {\r\n                currentIndex = totalPages - 1;\r\n            }\r\n            updateCarousel();\r\n            updatePagination();\r\n        });\r\n\r\n        // Обработка свайпов (для мобильных устройств)\r\n        let startX = 0;\r\n        let endX = 0;\r\n\r\n        carouselInner.addEventListener('touchstart', (event) => {\r\n            startX = event.touches[0].clientX;\r\n        });\r\n\r\n        carouselInner.addEventListener('touchmove', (event) => {\r\n            endX = event.touches[0].clientX;\r\n        });\r\n\r\n        carouselInner.addEventListener('touchend', () => {\r\n            const deltaX = startX - endX;\r\n            if (deltaX > 50) {\r\n                if (currentIndex < totalPages - 1) {\r\n                    currentIndex++;\r\n                } else {\r\n                    currentIndex = 0;\r\n                }\r\n            } else if (deltaX < -50) {\r\n                if (currentIndex > 0) {\r\n                    currentIndex--;\r\n                } else {\r\n                    currentIndex = totalPages - 1;\r\n                }\r\n            }\r\n            updateCarousel();\r\n            updatePagination();\r\n        });\r\n\r\n        // Инициализация\r\n        updatePagination();\r\n        updateCarousel();\r\n    }\r\n\r\n    // Инициализация каруселей\r\n    initCarousel({\r\n        carouselInnerSelector: '.carousel-inner',\r\n        itemSelector: '.carousel-item',\r\n        prevButtonSelector: '.carousel-prev',\r\n        nextButtonSelector: '.carousel-next',\r\n        paginationSelector: '.carousel-pagination',\r\n        itemsPerPage: 2,\r\n        itemWidth: 260,\r\n        gap: 20,\r\n    });\r\n\r\n    initCarousel({\r\n        carouselInnerSelector: '.carousel-inner-mobile',\r\n        itemSelector: '.carousel-item-mobile',\r\n        prevButtonSelector: '.carousel-prev-mobile',\r\n        nextButtonSelector: '.carousel-next-mobile',\r\n        paginationSelector: '.carousel-pagination-mobile',\r\n        itemsPerPage: 1,\r\n        itemWidth: 260,\r\n        gap: 20,\r\n    });\r\n\r\n    initCarousel({\r\n        carouselInnerSelector: '.carousel-inner-info',\r\n        itemSelector: '.carousel-item-info',\r\n        prevButtonSelector: '.carousel-prev-info',\r\n        nextButtonSelector: '.carousel-next-info',\r\n        paginationSelector: '.carousel-pagination-info',\r\n        itemsPerPage: 2,\r\n        itemWidth: 260,\r\n        gap: 20,\r\n    });\r\n\r\n    initCarousel({\r\n        carouselInnerSelector: '.carousel-inner-info-mobile',\r\n        itemSelector: '.carousel-item-info-mobile',\r\n        prevButtonSelector: '.carousel-prev-info-mobile',\r\n        nextButtonSelector: '.carousel-next-info-mobile',\r\n        paginationSelector: '.carousel-pagination-info-mobile',\r\n        itemsPerPage: 1,\r\n        itemWidth: 260,\r\n        gap: 20,\r\n    });\r\n});\n\n//# sourceURL=webpack://test_frontend/./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;